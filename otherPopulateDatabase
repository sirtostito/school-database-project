import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.time.LocalDate;
import java.time.Month;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.Random;


public class PopulateDatabase {
    public static void main(String[] args) throws FileNotFoundException {


        for (int i = 1; i <= 20; i++) {
            LocalDate start = LocalDate.of(2007, Month.JANUARY, 1);
            LocalDate end = LocalDate.of(2010, Month.DECEMBER, 31);
            long days = ChronoUnit.DAYS.between(start, end);
            LocalDate randomDate = start.plusDays(new Random().nextInt((int) days + 1));
            System.out.println("INSERT INTO Students ( FirstName, LastName, StudentID, Address, date_of_birth ) VALUES ( 'Student" + i + "', " +
                    "'Doe" + i + "' , " + i + "' , " + i + " Forest Hills Ave" + "' , " + randomDate + "');");
        }


        String filePath = "src/Course";


        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            String line;
            int count = 1;
            while ((line = reader.readLine()) != null) {
                String[] words = line.split(" ");
                String courseType = words[0];
                String courseName = words[1];
                System.out.println("INSERT INTO Courses ( CourseType, CourseID, CourseName) VALUES ('" + courseType + "', " + count + ", '" + courseName + "');");
                count++;
            }
            System.out.println();
        } catch (IOException e) {
            System.err.println("Error reading file: " + e.getMessage());
        }


        String departmentFilePath = "src/Department";


        try (BufferedReader reader = new BufferedReader(new FileReader(departmentFilePath))) {
            String line;
            int count = 1;
            while ((line = reader.readLine()) != null) {
                String[] words = line.split(" ");
                String departmentName = words[0];
                String APName = words[1];
                System.out.println("INSERT INTO Department ( DepartmentName, DepartmentID, AP_of_Department) VALUES ('" + departmentName + "', " + count + ", '" + APName + "');");
                count++;
            }
            System.out.println();
        } catch (IOException e) {
            System.err.println("Error reading file: " + e.getMessage());
        }
        String teacherFilePath = "src/Teachers";


        try (BufferedReader reader = new BufferedReader(new FileReader(teacherFilePath))) {
            String line;
            int department = 1;
            int count = 1;
            while ((line = reader.readLine()) != null) {
                if (line.equals("*")) {
                    department++;
                }
                if (!line.equals("*")) {
                    String[] words = line.split(" ");
                    String firstName = words[0];
                    String lastName = words[1];
                    System.out.println("INSERT INTO Teachers ( FirstName, LastName, TeacherID, Class, Department) VALUES ('" + firstName + "', '" + lastName + "', " + count + ", 'Test', " + department + ");");
                    count++;
                }
            }
            System.out.println();
        } catch (IOException e) {
            System.err.println("Error reading file: " + e.getMessage());
        }

        String assignmentsFilePath = "src/Assignments";


        try (BufferedReader reader = new BufferedReader(new FileReader(assignmentsFilePath))) {
            String line;
            // 12 Minor, 3 Major
            // Minor - SubjectHW#
            // Major - SubjectTest#
            int count = 1;

        } catch (IOException e) {
            System.err.println("Error reading file: " + e.getMessage());
        }

        String courseFile = "src/Course";
        Random rand = new Random();


        String[] floors = {"B", "1", "2", "3", "4", "5", "6", "7", "8"}; // Basement East No Class; 7th Floor only South; 8th Floor no class
        String[] wings = {"N", "S", "E", "W"};
        int totalTeachers = 62;
        int courseId = 1;
        int sectionCount = 0;


        ArrayList<String> usedRoomPeriod = new ArrayList<>();


        try (BufferedReader reader = new BufferedReader(new FileReader(courseFile))) {
            String line;


            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(" ");
                if (parts.length < 2) continue;
                String courseType = parts[0];


                int totalOfferings = 1 + rand.nextInt(5);
                int offeringsCreated = 0;


                while (offeringsCreated < totalOfferings) {
                    int period = 1 + rand.nextInt(10);
                    String room = "";
                    boolean foundAvailableSlot = false;
                    int safetyCounter = 0;


                    while (!foundAvailableSlot && safetyCounter < 100) {
                        String floor = floors[rand.nextInt(floors.length)];
                        String wing = wings[rand.nextInt(wings.length)];
                        int roomNum = (wing.equals("E") || wing.equals("W")) ? 1 + rand.nextInt(30) : 1 + rand.nextInt(10);
                        room = floor + wing + roomNum;
                        String key = room + "_" + period;


                        if (!usedRoomPeriod.contains(key)) {
                            usedRoomPeriod.add(key);
                            foundAvailableSlot = true;
                        }


                        safetyCounter++;
                    }


                    if (!foundAvailableSlot) {
                        break;
                    }


                    int teacherId = 1 + rand.nextInt(totalTeachers);
                    int sectionId = 1000 + rand.nextInt(9000);


                    System.out.println("INSERT INTO class_sections (teacher_id, course_type, period, room_number, course_id, section_id, assignment_id) " +
                            "VALUES (" + teacherId + ", '" + courseType + "', " + period + ", '" + room + "', " + courseId + ", " + sectionId + ", NULL);");


                    offeringsCreated++;
                    sectionCount++;
                }


                courseId++;
            }


        } catch (IOException e) {
            System.err.println("Error reading course file: " + e.getMessage());
        }


        System.out.println("-- Total class sections created: " + sectionCount);


    }

    String testpath = "src/test";


}
